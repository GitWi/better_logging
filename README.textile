h1. "Better Logging" Rails plugin

This is a Rails plugin that improves the log format.

It adds severity level (with colour, if ActiveRecord::Base.colorize_logging == true), hostname and PID to each log line, and it and adds warn() and exception() methods that take an exception as an argument and print the stack trace.

For example, here's how the default format looks:

<pre>
Processing PeopleController#show (for 127.0.0.1 at 2009-04-12 13:27:04) [GET]
Session ID: 7eeb00aa62b395698a28bf033e56b7c5
Parameters: {"action"=>"show", "id"=>"pauldowman", "controller"=>"people"}
User Load (0.4ms)   SELECT * FROM `users` WHERE (string_id = 'pauldowman') LIMIT 1
User Columns (2.1ms)   SHOW FIELDS FROM `users`
Rendering template within layouts/application
Rendering people/show
Rendered layouts/_head (3.1ms)
Rendered layouts/_navigation (2.2ms)
Adding Cache-Control header
Completed in 164ms (View: 116, DB: 21) | 200 OK [http://localhost/people/pauldowman]
</pre>

Here's how the same thing would look in development mode. Note that the severity (INFO, WARN, ERROR, etc), is printed in colour (if colour is enabled for the log, which it is by default in development mode).

<pre>
Processing PeopleController#show (for 127.0.0.1 at 2009-04-12 13:27:04) [GET]
INFO   Session ID: 7eeb00aa62b395698a28bf033e56b7c5
INFO   Parameters: {"action"=>"show", "id"=>"pauldowman", "controller"=>"people"}
DEBUG  User Load (0.4ms)   SELECT * FROM `users` WHERE (string_id = 'pauldowman') LIMIT 1
DEBUG  User Columns (2.1ms)   SHOW FIELDS FROM `users`
INFO   Rendering template within layouts/application
INFO   Rendering people/show
DEBUG  Rendered layouts/_head (3.1ms)
DEBUG  Rendered layouts/_navigation (2.2ms)
INFO   Adding Cache-Control header
INFO   Completed in 164ms (View: 116, DB: 21) | 200 OK [http://localhost/people/pauldowman]
</pre>


And here's how it would look in production mode, on a host named "akash", with process id 27471:

<pre>
akash.27471   Processing PeopleController#show (for 127.0.0.1 at 2009-04-12 13:27:04) [GET]
akash.27471   13:27:04  INFO   Session ID: 7eeb00aa62b395698a28bf033e56b7c5
akash.27471   13:27:04  INFO   Parameters: {"action"=>"show", "id"=>"pauldowman", "controller"=>"people"}
akash.27471   13:27:04  DEBUG  User Load (0.4ms)   SELECT * FROM `users` WHERE (string_id = 'pauldowman') LIMIT 1
akash.27471   13:27:04  DEBUG  User Columns (2.1ms)   SHOW FIELDS FROM `users`
akash.27471   13:27:04  INFO   Rendering template within layouts/application
akash.27471   13:27:04  INFO   Rendering people/show
akash.27471   13:27:04  DEBUG  Rendered layouts/_head (3.1ms)
akash.27471   13:27:04  DEBUG  Rendered layouts/_navigation (2.2ms)
akash.27471   13:27:04  INFO   Adding Cache-Control header
akash.27471   13:27:04  INFO   Completed in 164ms (View: 116, DB: 21) | 200 OK [http://localhost/people/pauldowman]
</pre>


And here's how it would look in production mode on a host with a long name name: this host name is "mybigserver-7", the process id is 27471:

<pre>
..igserver-7.27471   Processing PeopleController#show (for 127.0.0.1 at 2009-04-12 13:27:04) [GET]
..igserver-7.27471   13:27:04  INFO   Session ID: 7eeb00aa62b395698a28bf033e56b7c5
..igserver-7.27471   13:27:04  INFO   Parameters: {"action"=>"show", "id"=>"pauldowman", "controller"=>"people"}
..igserver-7.27471   13:27:04  DEBUG  User Load (0.4ms)   SELECT * FROM `users` WHERE (string_id = 'pauldowman') LIMIT 1
..igserver-7.27471   13:27:04  DEBUG  User Columns (2.1ms)   SHOW FIELDS FROM `users`
..igserver-7.27471   13:27:04  INFO   Rendering template within layouts/application
..igserver-7.27471   13:27:04  INFO   Rendering people/show
..igserver-7.27471   13:27:04  DEBUG  Rendered layouts/_head (3.1ms)
..igserver-7.27471   13:27:04  DEBUG  Rendered layouts/_navigation (2.2ms)
..igserver-7.27471   13:27:04  INFO   Adding Cache-Control header
..igserver-7.27471   13:27:04  INFO   Completed in 164ms (View: 116, DB: 21) | 200 OK [http://localhost/people/pauldowman]
</pre>



h2. Why?

h3. Adding severity

All lines printed to the log have a "severity" level, this can be "DEBUG", "WARN", "ERROR", etc. Normally this isn't included in the log output, so it's impossible to search a log file for warnings or errors, or filter based on severity, and it's just a useful thing to see.

h3. Adding hostname and process id

Normally, when not in development mode, a Rails app consists of more than one Rails process responding to requests at the same time. Those processes may be printing lines to the log at the same time, and it's hard to know which process printed a certain line.

Also, it's common to have multiple servers working in parallel, and a user's session might involve requests to multiple servers. If the log files are combined it's useful to know which process on which server printed a given line.

This makes it possible to filter a Rails log to show output from one process only, and to combine the log files from multiple servers.

The hostname is truncated (by default to 10 characters but this is configurable). The end of the hostname is printed, rather than the beginning, because often the end of the hostname is more unique.

h3. Adding a timestamp

This should be pretty obvious, but the log file isn't too useful for debugging errors if you don't know what time anything happened. The first line printed by each Rails action does include a timestamp, but it's common to have other processes that aren't responding to web requests, and these are likely printing to your Rails log also (e.g. a background queue, etc).


h2. Why not log to syslog?

It's a single point of failure, and it will become a scalability bottleneck. There are good arguments for using a common syslog server, but I prefer to just log locally on each server and combine them via post-processing.


h2. Installation

@./script/plugin install git://github.com/pauldowman/better_logging.git@


h2. Configuration

By default it behaves differently in development mode, it doesn't print the time, process id or hostname. If RAILS_ENV is not "development" those will be printed.

There are two options that can be set, add these lines to an initializer:

@PaulDowman::RailsPlugins::BetterLogging.verbose = false@
* This suppresses printing of the hostname, pid and timestamp this defaults to false in development mode, true otherwise

@PaulDowman::RailsPlugins::BetterLogging.hostname_maxlen = 3@
* This sets the maximum number of characters of the hostname that will be printed. The beginning of the hostname is truncated, rather than the end, because often the end of the hostname is more unique than the beginning. The default is 10.


h2. Requirements

This has only been tested with Rails 2.2 so far. It probably won't work with Rails 1.x. If you try it with another version, please let me know and I'll update this document (and try to fix the problem).


h2. How does it work?

It works by modifying ActiveSupport::BufferedLogger (the Rails logger class).


h2. License

This is distributed under a Creative Commons "Attribution-Share Alike" license: for details see:
http://creativecommons.org/licenses/by-sa/3.0/


h2. Reporting bugs:

Please let me know if you find any bugs, my contact info is here: http://pauldowman.com/contact/

Or even better, send me a patch or GitHub pull request!
